(Function next Loc Loc)
(Function key  Loc Int)

(EqSp (Lseg (CKys)) (Circ (Keys)))

(RecFunction Lseg Loc Loc Bool)
(RecFunction Circ Loc Bool)
(RecFunction CKys Loc Loc SetInt)
(RecFunction Keys Loc SetInt)

(Var x Loc)
(Var y Loc)
(Var nxt Loc)

(RecDef (Lseg x y) (ite (= x y) True (ite (= x nil) False
                    (Exists (= nxt (next x)) (* (= nxt (next x)) (Lseg nxt y)))
                    )
               ))

(RecDef (Circ x) (ite (= x nil) True
                    (Exists (= nxt (next x)) (* (= nxt (next x)) (Lseg nxt x)))
               ))

(RecDef (CKys x y) (ite (= x y) EmptySetInt (ite (= x nil) EmptySetInt
                        (SetAdd (CKys (next x) y) (key x)))))
(RecDef (Keys x) (ite (= x nil) EmptySetInt
                      (SetAdd (CKys (next x) x) (key x))))

(Var k Int)
(Var tmp Loc)
(Var ret Bool)

(Program cl_find_helper (x y k) (ret))
(Pre (Lseg x y))
(Post (and (Lseg x y) (and (= (CKys x y) (Old (CKys x y)))
           (= ret (IsMember k (CKys x y))) )))

(If (= x y)
 Then
  (assign ret False)
  (return)
 Else
  (If (= k (key x))
   Then
    (assign ret True)
    (return)
   Else
    (assign tmp (next x))
    (call cl_find_helper (tmp y k) (ret))
    (return)
  )
)

(Program cl_find (x k) (ret))
(Pre (Circ x))
(Post (and (Circ x) (and (= (Keys x) (Old (Keys x)))
           (= ret (IsMember k (Keys x))) )))

(If (= x nil)
 Then
  (assign ret False)
  (return)
 Else
  (If (= k (key x))
   Then
    (assign ret True)
    (return)
   Else
    (assign tmp (next x))
    (call cl_find_helper (tmp x k) (ret))
    (return)
  )
)
