(Function key   Loc Int)
(Function prio  Loc Int)
(Function left  Loc Loc)
(Function right Loc Loc)

(EqSp (Keys (MinKey MaxKey MaxPrio Treap Priorities)))

(RecFunction Keys       Loc SetInt)
(RecFunction MinKey  Loc Int)
(RecFunction MaxKey  Loc Int)
(RecFunction MaxPrio Loc Int)
(RecFunction Treap      Loc Bool)
(RecFunction Priorities Loc SetInt)

(Var x Loc)
(Var rht Loc)
(Var lft Loc)
(Var p Int)
(Var k Int)
(Var plus_infty Int)
(Var minus_infty Int)

(RecDef (MinKey x)
  (ite (= x nil) plus_infty
    (ite (<= (key x) (MinKey (left x)))
      (ite (<= (key x) (MinKey (right x)))
        (key x)
        (MinKey (right x))
      )
      (ite (<= (MinKey (left x)) (MinKey (right x)))
        (MinKey (left x))
        (MinKey (right x))))))

(RecDef (MaxKey x)
  (ite (= x nil) minus_infty
    (ite (>= (key x) (MaxKey (left x)))
      (ite (>= (key x) (MaxKey (right x)))
        (key x)
        (MaxKey (right x))
      )
      (ite (>= (MaxKey (left x)) (MaxKey (right x)))
        (MaxKey (left x))
        (MaxKey (right x))))))

(RecDef (MaxPrio x)
  (ite (= x nil) minus_infty
    (ite (>= (prio x) (MaxPrio (left x)))
      (ite (>= (prio x) (MaxPrio (right x)))
        (prio x)
        (MaxPrio (right x))
      )
      (ite (>= (MaxPrio (left x)) (MaxPrio (right x)))
        (MaxPrio (left x))
        (MaxPrio (right x))))))

(RecDef (Keys x)
  (ite (= x nil) EmptySetInt
    (SetAdd (SetUnion (Keys (left x)) (Keys (right x))) (key x))))
(RecDef (Priorities x)
  (ite (= x nil) EmptySetInt
    (SetAdd (SetUnion (Priorities (left x)) (Priorities (right x))) (prio x))))

(RecDef (Treap x) (ite (= x nil) True (and (Exists (= lft (left x)) (Exists (= rht (right x)) (Exists (= k (key x)) (Exists (= p (prio x))
                                (* (and (< k plus_infty) (and (< minus_infty k) (and (< p plus_infty) (< minus_infty p))))
                                    (* (= k (key x)) (* (and (Treap lft) (and (< (MaxKey lft) k) (< (MaxPrio lft) p)))
                                                        (and (Treap rht) (and (< k (MinKey rht)) (< (MaxPrio rht) p))))))
                                    ))))
                                    (= EmptySetInt (SetIntersect (Priorities (left x)) (Priorities (right x))))
)
                ))


(Var ret Bool)
(Var aux Loc)

(lemma (x) (=> (Treap x) (=> (< k (MinKey x)) (not (IsMember k (Keys x))))))
(lemma (x) (=> (Treap x) (=> (> k (MaxKey x)) (not (IsMember k (Keys x))))))

(Program treap_find_rec (x k) (ret))
(Pre (* (and (< k plus_infty) (< minus_infty k)) (Treap x)))
(Post (and (Treap x) (and (= ret (IsMember k (Keys x)))
           (and (= (Keys x) (Old (Keys x))) 
           (and (= (Priorities x) (Old (Priorities x)))
           (and (= (MinKey x) (Old (MinKey x))) 
           (and (= (MaxKey x) (Old (MaxKey x)))
           (= (MaxPrio x) (Old (MaxPrio x)))
            )))))))

(If (= x nil)
 Then
  (assign ret False)
  (return)
 Else
  (If (= k (key x))
   Then
    (assign ret True)
    (return)
   Else
    (If (< k (key x))
     Then
      (assign aux (left x))
      (call treap_find_rec (aux k) (ret))
      (return)
     Else
      (assign aux (right x))
      (call treap_find_rec (aux k) (ret))
      (return)
    )
  )
)
