(Function left  Loc Loc)
(Function right Loc Loc)
(Function next  Loc Loc)
(Function key   Loc Int)


(EqSp (MinTree (MaxTree BST TreeKeys)) (MinList (Sorted ListKeys)))

(RecFunction MinList  Loc Int)
(RecFunction MinTree  Loc Int)
(RecFunction MaxTree  Loc Int)

(RecFunction Sorted   Loc Bool)
(RecFunction ListKeys Loc SetInt)
(RecFunction BST      Loc Bool)
(RecFunction TreeKeys Loc SetInt)

(Var plus_infty  Int)
(Var minus_infty Int)

(Var x Loc)

(RecDef (MinList x) (ite (= x nil) plus_infty
                      (ite (<= (key x) (MinList (next x)))
                        (key x) (MinList (next x)) )))
(RecDef (MinTree x) (ite (= x nil) plus_infty
                      (ite (<= (key x) (MinTree (left x)))
                        (ite (<= (key x) (MinTree (right x)))
                          (key x) (MinTree (right x)))
                        (ite (<= (MinTree (left x)) (MinTree (right x)))
                          (MinTree (left x)) (MinTree (right x)) ))))
(RecDef (MaxTree x) (ite (= x nil) minus_infty
                      (ite (>= (key x) (MaxTree (left x)))
                        (ite (>= (key x) (MaxTree (right x)))
                          (key x) (MaxTree (right x)))
                        (ite (>= (MaxTree (left x)) (MaxTree (right x)))
                          (MaxTree (left x)) (MaxTree (right x)) ))))

(RecDef (Sorted x) (ite (= x nil) True
                    (Exists (= nxt (next x)) (Exists (= k (key x))
                    (* (and (< k plus_infty) (< minus_infty k)) (* 
                      (= k (key x)) (and (Sorted nxt) (<= k (MinList nxt)))))
                    ))
               ))
               
(RecDef (ListKeys x) (ite (= x nil) EmptySetInt
                                    (SetAdd (ListKeys (next x)) (key x))))

(RecDef (BST x) (ite (= x nil) True (Exists (= y (left x)) (Exists (= z (right x)) (Exists (= k (key x))
                                (* (and (< k plus_infty) (< minus_infty k)) 
                                  (* (* (= k (key x)) (and (BST y) (< (MaxTree y) k))) (and (BST z) (< k (MinTree z)))))
                          )
                        )
                      )
                ))

(RecDef (TreeKeys x) (ite (= x nil) EmptySetInt
                      (SetAdd (SetUnion (TreeKeys (left x)) (TreeKeys (right x)))
                        (key x))))



(Var t Loc)
(Var l Loc)
(Var ret Loc)
(Var k Int)

(Var lnode Loc)
(Var tkey Int)
(Var tright Loc)
(Var tleft Loc)
(Var tmp Loc)

(Program insertlist (l k) (ret))
(Pre (* (and (Sorted l) (<= k (MinList l)))
      (and (< k plus_infty) (< minus_infty k)) ))
(Post (and (Sorted ret) (= (ListKeys ret) (SetAdd (Old (ListKeys l)) k))
           (= (MinList ret) k) ))

(alloc ret)
(assume (not (= ret nil)))
(assign (key  ret) k)
(assign (next ret) l)
(return)

(Program tree2list (t l) (ret))
(Pre (and (* (BST t) (Sorted l)) (<= (MaxTree t) (MinList l)) ))
(Post (* (and (BST t) 
              (= (TreeKeys t) (Old (TreeKeys t)))
              (= (MinTree t) (Old (MinTree t)))
              (= (MaxTree t) (Old (MaxTree t))) )
          (and (Sorted ret) (= (ListKeys ret) (SetUnion (Old (TreeKeys t)) (Old (ListKeys l))))
          (ite (= t nil) (= (MinList ret) (Old (MinList l))) (= (MinList ret) (Old (MinTree t))))  )
))

(If (= t nil)
 Then
  (assign ret l)
  (return)
 Else
  (assign tkey (key t))
  (assume (< tkey plus_infty))

  (assign tright (right t))
  (assign tleft  (left t))

  (call tree2list (tright l) (tmp))
  (call insertlist (tmp tkey) (lnode))
  (call tree2list (tleft lnode) (ret))
  
  (return)
)
