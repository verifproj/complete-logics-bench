(Var x Loc)

(Function key   Loc Int)
(Function left  Loc Loc)
(Function right Loc Loc)

(EqSp (Tree (InTree Size)))

(RecFunction Tree   Loc Bool)
(RecFunction InTree Loc Bool)
(RecFunction Order  Loc Int)
(RecFunction Size   Loc Int)
(RecFunction LSize  Loc Int)
(RecFunction RSize  Loc Int)

(RecDef (Tree x) (ite (= x nil) True
                      (Exists (= lft (left x)) (Exists (= rht (right x))
                        (* (= lft (left x)) (* (Tree lft) (Tree rht)))
                      ))
                  ))
                  


(RecDef (Order x) (ite (= x nil) (IntConst 0) (key x)))
(RecDef (Size x) (ite (= x nil) (IntConst 0)
                      (+ (IntConst 1)
                         (+ (Size (left x)) (Size (right x))))))
(RecDef (LSize x) (Size (left x)))
(RecDef (RSize x) (Size (right x)))
(RecDef (InTree x) (ite (= x nil) True (Exists (= k (key x)) (= rht (right x)) (= lft (left x))
                                          (* (= k (key x)) (*
                                                  (ite (= lft nil) True 
                                                    (and (InTree lft) (Exists (= lft2 (left lft)) 
                                                            (* (InTree lft2) (= k (+ (+ (Order lft) (RSize lft)) (IntConst 1))))))
                                                                        )
                                              (ite (= rht nil) True 
                                                    (and (InTree rht) (Exists (= rht2 (right rht)) 
                                                            (* (InTree rht2) (= (Order rht) (+ (+ k (LSize rht)) (IntConst 1))))))
                                                                        )
                                                          
                                                          )
                                          )
                                        )))


(Var n Int)
(Var n1 Int)
(Var n2 Int)
(Var ret Int)

(Var lft Loc)
(Var rht Loc)

(Program inorder (x n) (ret))
(Pre (Tree x))
(Post (* (= ret (+ n (Old (Size x)))) 
          (and (InTree x) (= (Size x) (Old (Size x)))
              (ite (= x nil) True (Exists (= lft (left x)) (= rht (right x)) 
                                  (* (= (Order x) (+ n (Old (LSize x)))) 
                                    (*  (= (Size lft) (Old (Size lft))) (= (Size rht) (Old (Size rht)))))
                                  )
              )
          )
))

(If (= x nil)
 Then
  (assign ret n)
  (return)
 Else
  (assign lft (left x))
  (call inorder (lft n) (n1))

  (assign (key x) n1)
  (assign n2 (+ n1 (IntConst 1)))

  (assign rht (right x))
  (call inorder (rht n2) (ret))
  (return)
)
