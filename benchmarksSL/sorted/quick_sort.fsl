(Var x   Loc)
(Var nxt Loc)
(Var y Loc)
(Var z Loc)
(Var k Int)

(Function next Loc Loc)
(Function key  Loc Int)

(EqSp (Min (Max List Keys Sorted)))
(Var plus_infty Int)
(RecFunction Min Loc Int)
(RecDef (Min x) (ite (= x nil) plus_infty (ite (< (key x) (Min (next x))) (key x) (Min (next x)))))

(Var minus_infty Int)
(RecFunction Max Loc Int)
(RecDef (Max x) (ite (= x nil) minus_infty (ite (> (key x) (Max (next x))) (key x) (Max (next x)))))

(RecFunction List   Loc Bool)
(RecFunction Keys   Loc SetInt)
(RecFunction Sorted Loc Bool)

(RecDef (List x) (ite (= x nil) True
                    (Exists (= y (next x)) (Exists (= k (key x))
                    (* (and (< k plus_infty) (< minus_infty k))
                      (* (= (next x) (next x)) (List y)))
                    ))
               ))

(RecDef (Keys x) (ite (= x nil) EmptySetInt
                 (SetAdd (Keys (next x)) (key x))))

(RecDef (Sorted x) (ite (= x nil) True
                    (Exists (= nxt (next x)) (Exists (= k (key x))
                    (* (and (< k plus_infty) (< minus_infty k)) (* 
                      (= k (key x)) (and (Sorted nxt) (<= k (Min nxt)))))
                    ))
               ))

(Var cur Loc)
(Var pivot Int)
(Var lpt Loc)
(Var rpt Loc)
(Var tmp Loc)
(Var aux Loc)
(Var t1 Loc)
(Var t2 Loc)
(Var ret Loc)
(Var lres Loc)
(Var rres Loc)
(Var ltmp Loc)
(Var rtmp Loc)

(Program concat_sorted (t1 t2) (ret))
(Pre (and (* (Sorted t1) (Sorted t2)) 
          (<= (Max t1) (Min t2))
          ))
(Post (and (Sorted ret)
           (and (= (Keys ret) (SetUnion (Old (Keys t1)) (Old (Keys t2))))
           (and (ite (= t1 nil) (= (Min ret) (Old (Min t2))) (= (Min ret) (Old (Min t1))))
           (ite (= t2 nil) (= (Max ret) (Old (Max t1))) (= (Max ret) (Old (Max t2)))) ))))

(If (= t1 nil)
 Then
  (assign ret t2)
  (return)
 Else
  (assign aux (next t1))
  (call concat_sorted (aux t2) (tmp))
  (assign (next t1) tmp)
  (assign ret t1)
  (return)
)

(Program partition_helper (cur pivot lpt rpt) (lres rres))
(Pre (* (List cur) (* (and (List lpt) (<= (Max lpt) pivot)) 
                         (and (List rpt) (<= pivot (Min rpt)))
          )))
(Post (and (* (and (List lres) (<= (Max lres) pivot)) (and (List rres)  (<= pivot (Min rres))) )
           (and (= (SetAdd (SetUnion (Keys lres) (Keys rres)) pivot)
                    (SetAdd (SetUnion (Old (Keys cur)) (SetUnion (Old (Keys lpt)) (Old (Keys rpt)))) pivot))

           (and (ite (= lres nil)
             (* (= lpt nil)
                  (and (or (= (Min rres) (Old (Min rpt))) (= (Min rres) (Old (Min cur))))
                  (and (<= (Min rres) (Old (Min rpt))) 
                  (<= (Min rres) (Old (Min cur))))))
             (* (and (or (= (Min lres) (Old (Min lpt))) (= (Min lres) (Old (Min cur))))
                  (and (<= (Min lres) (Old (Min lpt))) 
                  (<= (Min lres) (Old (Min cur)))))
                  (or (<= (Old (Min cur)) (Min rres)) (<= (Old (Min rpt)) (Min rres))))
                )

               (ite (= rres nil)
             (* (= rpt nil)
                  (and (or (= (Max lres) (Old (Max lpt))) (= (Max lres) (Old (Max cur))))
                  (and (<= (Old (Max lpt)) (Max lres)) 
                  (<= (Old (Max cur)) (Max lres)))))
             (* (and (or (= (Max rres) (Old (Max rpt))) (= (Max rres) (Old (Max cur))))
                  (and (<= (Old (Max rpt)) (Max rres)) 
                   (<= (Old (Max cur)) (Max rres))))
                  (or (<= (Max lres) (Old (Max cur))) (<= (Max lres) (Old (Max lpt)))))
               )
           ))))

(If (= cur nil)
 Then
  (assume (and (<= (Min lpt) plus_infty)  (<= (Min rpt) plus_infty)
               (<= minus_infty (Max lpt)) (<= minus_infty (Max rpt)) ))

  (assign lres lpt)
  (assign rres rpt)
  (return)
 Else
  (assign tmp (next cur))
  (If (<= (key cur) pivot)
   Then
    (assign (next cur) lpt)
    (assign ltmp cur)
    (assign rtmp rpt)
   Else
    (assign (next cur) rpt)
    (assign ltmp lpt)
    (assign rtmp cur)
  )
  (call partition_helper (tmp pivot ltmp rtmp) (lres rres))
  (return)
)

(Program partition (x pivot) (lres rres))
(Pre (* (List x) (and (< minus_infty pivot) (< pivot plus_infty)) ))
(Post (and (* (and (List lres) (and (<= (Max lres) pivot) (and (<= (Old (Min x)) (Min lres)) (<= (Max lres) (Old (Max x)))))) 
              (and (List rres)  (and (<= pivot (Min rres)) (and (<= (Old (Min x)) (Min rres)) (<= (Max rres) (Old (Max x)))))) )
           (and (= (SetAdd (SetUnion (Keys lres) (Keys rres)) pivot) (SetAdd (Old (Keys x)) pivot))
           (and (ite (= lres nil)
              (* (= (Min rres) (Old (Min x))) (= (Min lres) (Min lres))) (* (= (Min lres) (Old (Min x))) (= (Min rres) (Min rres)) ))   
           (ite (= rres nil)
              (* (= (Max lres) (Old (Max x))) (= (Min rres) (Min rres))) (* (= (Max rres) (Old (Max x))) (= (Min lres) (Min lres)) ))  
          ))))

(assign lpt nil)
(assign rpt nil)


(assume (and (<= (Min x) plus_infty) (<= minus_infty (Max x))))
(call partition_helper (x pivot lpt rpt) (lres rres))
(return)

(Program quick_sort (x) (ret))
(Pre (List x))
(Post (and (Sorted ret) (and (= (Keys ret) (Old (Keys x)))
           (and (= (Min ret) (Old (Min x))) (= (Max ret) (Old (Max x))) ))))

(If (= x nil)
 Then
  (assign ret x)
  (return)
 Else
  (assign cur (next x))
  (assign pivot (key x))

  (call partition (cur pivot) (lres rres))

  (call quick_sort (rres) (t2))
  (assign (next x) t2)

  (If (= lres nil)
   Then
    (assign ret x)
    (return)
   Else
    (call quick_sort (lres) (t1))
    (call concat_sorted (t1 x) (ret))
    (return)
  )
)
