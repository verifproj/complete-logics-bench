(Var x Loc)
(Var k Int)
(Var nxt Loc)

(Function next Loc Loc)
(Function key  Loc Int)

(Var plus_infty Int)

(EqSp (Sorted (Min Keys)))
(RecFunction Sorted Loc Bool)
(RecFunction Min Loc Int)
(RecFunction Keys   Loc SetInt)

(RecDef (Min x) (ite (= x nil) plus_infty (ite (< (key x) (Min (next x))) (key x) (Min (next x)))))

(RecDef (Keys x) (ite (= x nil) EmptySetInt
                 (SetAdd (Keys (next x)) (key x))))

(RecDef (Sorted x) (ite (= x nil) True
                    (Exists (= nxt (next x)) (Exists (= k (key x))
                    (* (< k plus_infty) (* 
                      (= k (key x)) (and (Sorted nxt) (<= k (Min nxt)))))
                    ))
               ))

(Var ret Loc)
(Var tmp Loc)

(Program sorted_insert (x k) (ret))
(Pre (* (Sorted x) (< k plus_infty) ))
(Post (and (Sorted ret) (and (= (Keys ret) (SetAdd (Old (Keys x)) k))
           (ite (< (Old (Min x)) k) (= (Min ret) (Old (Min x))) (= (Min ret) k)) )))

(If (= x nil)
 Then
  (alloc ret)
  (assume (not (= ret nil)))
  (assign (key ret) k)
  (assign (next ret) nil)
  (return)
 Else (If (> k (key x))
 Then
  (assign nxt (next x))
  (call sorted_insert (nxt k) (tmp))
  (assign (next x) tmp)
  (assign ret x)
  (return)
 Else
  (alloc ret)
  (assume (not (= ret nil)))
  (assign (key ret) k)
  (assign (next ret) x)
  (return)
))
