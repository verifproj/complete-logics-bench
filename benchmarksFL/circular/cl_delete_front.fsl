(Function next Loc Loc)
(Function key  Loc Int)

(EqSp (Lseg (CKys)) (Circ (Keys)))

(RecFunction Lseg Loc Loc Bool)
(RecFunction Circ Loc Bool)
(RecFunction CKys Loc Loc SetInt)
(RecFunction Keys Loc SetInt)

(Var x Loc)
(Var y Loc)



(RecDef (Lseg x y) (ite (= x y) True
                   (ite (= x nil) False
                        (and (Lseg (next x) y)
                             (not (IsMember x (Sp (Lseg (antiSp (next x)) y)))) ))))
(RecDef (CKys x y) (ite (= x y) EmptySetInt (ite (= x nil) EmptySetInt
                        (SetAdd (CKys (next x) y) (key x)))))

(RecDef (Circ x) (ite (= x nil) True
                 (and (Lseg (next x) x)
                      (not (IsMember x (Sp (Lseg (antiSp (next x)) (antiSp x))))) )))
(RecDef (Keys x) (ite (= x nil) EmptySetInt
                      (SetAdd (CKys (next x) x) (key x))))

(lemma (x y) (=> (Lseg x y) (not (IsMember y (Sp (Lseg x y))))))

(Var k Int)
(Var tmp Loc)
(Var ret Loc)

(Program find_end (x y) (ret))
(Pre (and (Lseg x y) (not (= x nil)) (not (= y nil)) (not (= x y)) ))
(Post (and (Lseg x y) (= (CKys x y) (Old (CKys x y))) (not (= ret nil))
           (Lseg x ret) (= (next ret) y) 
           (not (IsMember y (Sp (Lseg x ret)))) (IsMember ret (Sp (Lseg x y)))
           (= (Sp (Lseg x y)) (SetAdd (Sp (Lseg x ret)) ret))
           (= (SetAdd (CKys x ret) (key ret)) (Old (CKys x y))) ))

(If (= (next x) y)
 Then
  (assign ret x)
  (return)
 Else
  (assign tmp (next x))
  (call find_end (tmp y) (ret))
  (return)
)

(Program cl_delete_front (x) (ret))
(Pre (Circ x))
(Post (and (Circ ret) 
           (ite (= x nil) (= (Keys ret) EmptySetInt)
                          (= (Keys ret) (Old (CKys (next x) x)))) ))

(If (= x nil)
 Then
  (assign ret x)
  (return)
 Else (If (= (next x) x)
 Then
  (free x)
  (assign ret nil)
  (return)
 Else
  (assign tmp (next x))
  (call find_end (tmp x) (ret))
  (assign (next ret) tmp)
  (free x)
  (return)
))
