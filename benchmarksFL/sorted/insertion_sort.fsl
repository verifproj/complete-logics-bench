(Var x Loc)
(Var k Int)

(Function next Loc Loc)
(Function key  Loc Int)

(Var plus_infty Int)

(EqSp (List (Min Keys Sorted)))

(RecFunction List   Loc Bool)
(RecFunction Min Loc Int)
(RecFunction Keys   Loc SetInt)
(RecFunction Sorted Loc Bool)

(RecDef (Min x) (ite (= x nil) plus_infty (ite (< (key x) (Min (next x))) (key x) (Min (next x)))))
(RecDef (Keys x) (ite (= x nil) EmptySetInt
                 (SetAdd (Keys (next x)) (key x))))
(RecDef (Sorted x) (ite (= x nil) True
                      (and (< (key x) plus_infty) (Sorted (next x))
                           (not (IsMember x (Sp (Sorted (antiSp (next x))))))
                           (<= (key x) (Min (next x))))))
(RecDef (List x) (ite (= x nil) True
                      (and (< (key x) plus_infty) (List (next x))
                           (not (IsMember x (Sp (List (antiSp (next x)))))))))

(lemma (x) (=> (Sorted x) (List x)))

(Var y Loc)
(Var ret Loc)
(Var nxt Loc)
(Var tmp Loc)

(Program sorted_insert (x) (ret))
(Pre (and (not (= x nil)) (List x) (Sorted (next x)) ))
(Post (and (Sorted ret) (= (Keys ret) (Old (Keys x)))
           (= (Min ret) (Old (Min x))) ))

(assign nxt (next x))
(If (= nxt nil)
 Then
  (assign ret x)
  (return)
 Else (If (> (key x) (key nxt))
 Then
  (assign y (next nxt))
  (assign (next x) y)
  (call sorted_insert (x) (tmp))
  (assign (next nxt) tmp)
  (assign ret nxt)
  (return)
 Else
  (assign ret x)
  (return)
))

(Program insertion_sort (x) (ret))
(Pre (List x))
(Post (and (Sorted ret) (= (Keys ret) (Old (Keys x))) ))

(If (= x nil)
 Then
  (assign ret x)
  (return)
 Else
  (assign nxt (next x))
  (call insertion_sort (nxt) (tmp))
  (assign (next x) tmp)
  (call sorted_insert (x) (ret))
  (return)
)
